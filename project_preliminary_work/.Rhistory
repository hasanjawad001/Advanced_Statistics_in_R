limit_break <- 0.99999
## For a million patients, how many tests can the hospital anticipate running?
num_trials <- 10 ## considering 10 repeated trials with 1 million patients to take avg.
trial_no_vs_required_tests <- vector() ## this will keep track of total required test for 1 million at each trial
for (trial_no in 1:num_trials){
num_patients <- 1000000
patient_no_vs_required_tests <- vector() ## this will keep track of required test for each patient
for (patient_no in 1:num_patients){
data_patient <- vector()
if ( runif(1) <= prob_sample_sick_healthy[1]){
data_patient <- 1 ## current patient is sick
}else{
data_patient <- 2 ## current patient is healthy
}
## prior and posterior
prob_x_sick_healthy <- c(0.001, 0.999) # initial belief about current patient
if (data_patient == 1){ ## patient is sick, data_patient==1
i <- 0
while (prob_x_sick_healthy[1] < limit_break){
data_test <- vector()
if ( runif(1) <= prob_like_sick[1]){
data_test <- 1 ## test result +ve
}else{
data_test <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data_test]) + (prob_x_sick_healthy[2] * prob_like_healthy[data_test])
prob_x_sick_healthy[1] = (prob_like_sick[data_test] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data_test] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
patient_no_vs_required_tests[patient_no] <- i
}else{ ## patient is healthy, data_patient==2
i <- 0
while (prob_x_sick_healthy[2] < limit_break){
data_test <- vector()
if ( runif(1) <= prob_like_healthy[1]){
data_test <- 1 ## test result +ve
}else{
data_test <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data_test]) + (prob_x_sick_healthy[2] * prob_like_healthy[data_test])
prob_x_sick_healthy[1] = (prob_like_sick[data_test] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data_test] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
patient_no_vs_required_tests[patient_no] <- i
}
}
sum_test_for_million <- sum(patient_no_vs_required_tests)
trial_no_vs_required_tests[trial_no] <- sum_test_for_million
}
print(trial_no_vs_required_tests)
paste('Avg. : ', mean(trial_no_vs_required_tests), ' for ', num_trials, ' trials!!!')
################################################################################
# How many times on average would I need to roll a loaded die to be 99.999% sure
# that it was loaded?
################################################################################
## clean
rm(list=ls())
## likelihood
prob_like_fair <- c(1/6,1/6,1/6,1/6,1/6,1/6) ## P(Y|X=fair)
prob_like_loaded <- c(1/10,1/10,1/10,1/10,1/10,1/2) ## P(Y|X=loaded)
## Avg times needed to roll a loaded die to be 99.999% sure.
data_x <- c(1,2,3,4,5,6)
data_prob <- prob_like_loaded
limit_break <- 99.999/100
num_trials <- 100000 ## considering 100k trials to take the avg
trial_no_vs_required_rolls <- vector()
for (trial_no in 1:num_trials){
## prior and posterior
prob_x_fair_loaded <- c(0.99, 0.01) ## fair, loaded
i <- 0
while (prob_x_fair_loaded[2] < limit_break){
data <- sample(data_x, 1, replace=TRUE, prob=data_prob)
denom <- (prob_x_fair_loaded[1] * prob_like_fair[data]) + (prob_x_fair_loaded[2] * prob_like_loaded[data])
prob_x_fair_loaded[1] = (prob_like_fair[data] * prob_x_fair_loaded[1])/denom ## fair
prob_x_fair_loaded[2] = (prob_like_loaded[data] * prob_x_fair_loaded[2])/denom ## loaded
i <- i + 1
}
trial_no_vs_required_rolls[trial_no] <- i
}
paste('Avg. : ', mean(trial_no_vs_required_rolls), ' for ', num_trials, ' trials!!!')
################################################################################
# Run simulations for a patient with the disease. About how many times on avg.
# must the test be repeated to achieve the hospital's requirements?
################################################################################
## clean
rm(list=ls())
## likelihood
prob_like_sick <- c(0.91, 0.09)  ## (+ve, -ve) given sick patient
prob_like_healthy <- c(0.16, 0.84) ## (+ve, -ve) given healthy patient
limit_break <- 0.99999
## Avg. times must be repeated to be sure
num_trials <- 100000 ## considering 100k trials to take the avg.
trial_no_vs_required_tests <- vector()
for (trial_no in 1:num_trials){
## prior and posterior
prob_x_sick_healthy <- c(0.001, 0.999) ## sick, healthy
i <- 0
while (prob_x_sick_healthy[1] < limit_break){ ## condition to be sure sick
data <- vector()
## simulations considering patient with disease
if ( runif(1) <= prob_like_sick[1]){
data <- 1 ## test result +ve
}else{
data <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data]) + (prob_x_sick_healthy[2] * prob_like_healthy[data])
prob_x_sick_healthy[1] = (prob_like_sick[data] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
trial_no_vs_required_tests[trial_no] <- i
}
paste('Avg. : ', mean(trial_no_vs_required_tests), ' for ', num_trials, ' trials!!!')
################################################################################
# Repeat the simulations for a patient without the disease. About how many times on avg.
# must the test be repeated to achieve the hospital's requirements?
################################################################################
## clean
rm(list=ls())
## likelihood
prob_like_sick <- c(0.91, 0.09)  ## (+ve, -ve) given sick patient
prob_like_healthy <- c(0.16, 0.84) ## (+ve, -ve) given healthy patient
limit_break <- 0.99999
## Avg. times must be repeated to be sure
num_trials <- 100000 ## considering 100k trials to take the avg
trial_no_vs_required_tests <- vector()
for (trial_no in 1:num_trials){
## prior and posterior
prob_x_sick_healthy <- c(0.001, 0.999) ## sick, healthy
i <- 0
while (prob_x_sick_healthy[2] < limit_break){ ## condition to be sure healthy
data <- vector()
## simulations considering patient without disease
if ( runif(1) <= prob_like_healthy[1]){
data <- 1 ## test result +ve
}else{
data <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data]) + (prob_x_sick_healthy[2] * prob_like_healthy[data])
prob_x_sick_healthy[1] = (prob_like_sick[data] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
trial_no_vs_required_tests[trial_no] <- i
}
paste('Avg. : ', mean(trial_no_vs_required_tests), ' for ', num_trials, ' trials!!!')
################################################################################
# How much should the hospital budget to run these tests?
################################################################################
## clean
rm(list=ls())
##
## of all the patients, we expect 0.1% with disease
prob_sample_sick_healthy <- c(0.001, 0.999)
## likelihood
prob_like_sick <- c(0.91, 0.09)  ## (+ve, -ve) given sick
prob_like_healthy <- c(0.16, 0.84) ## (+ve, -ve) given healthy
limit_break <- 0.99999
## For a million patients, how many tests can the hospital anticipate running?
num_trials <- 10 ## considering 10 repeated trials with 1 million patients to take avg.
trial_no_vs_required_tests <- vector() ## this will keep track of total required test for 1 million at each trial
for (trial_no in 1:num_trials){
num_patients <- 1000000
patient_no_vs_required_tests <- vector() ## this will keep track of required test for each patient
for (patient_no in 1:num_patients){
data_patient <- vector()
if ( runif(1) <= prob_sample_sick_healthy[1]){
data_patient <- 1 ## current patient is sick
}else{
data_patient <- 2 ## current patient is healthy
}
## prior and posterior
prob_x_sick_healthy <- c(0.001, 0.999) # initial belief about current patient
if (data_patient == 1){ ## patient is sick, data_patient==1
i <- 0
while (prob_x_sick_healthy[1] < limit_break){
data_test <- vector()
if ( runif(1) <= prob_like_sick[1]){
data_test <- 1 ## test result +ve
}else{
data_test <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data_test]) + (prob_x_sick_healthy[2] * prob_like_healthy[data_test])
prob_x_sick_healthy[1] = (prob_like_sick[data_test] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data_test] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
patient_no_vs_required_tests[patient_no] <- i
}else{ ## patient is healthy, data_patient==2
i <- 0
while (prob_x_sick_healthy[2] < limit_break){
data_test <- vector()
if ( runif(1) <= prob_like_healthy[1]){
data_test <- 1 ## test result +ve
}else{
data_test <- 2 ## test result -ve
}
denom <- (prob_x_sick_healthy[1] * prob_like_sick[data_test]) + (prob_x_sick_healthy[2] * prob_like_healthy[data_test])
prob_x_sick_healthy[1] = (prob_like_sick[data_test] * prob_x_sick_healthy[1])/denom ## sick
prob_x_sick_healthy[2] = (prob_like_healthy[data_test] * prob_x_sick_healthy[2])/denom ## healthy
i <- i + 1
}
patient_no_vs_required_tests[patient_no] <- i
}
}
sum_test_for_million <- sum(patient_no_vs_required_tests)
trial_no_vs_required_tests[trial_no] <- sum_test_for_million
}
print(trial_no_vs_required_tests)
paste('Avg. : ', mean(trial_no_vs_required_tests), ' for ', num_trials, ' trials!!!')
library("gap")
rm(list=ls())
#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
pValues <- vector()
for( i in 1:10000)
{
x1 <- 0
x2 <- 0
numReadsLane1 <- ceiling( 5000 + runif(1) * 5000)
numReadsLane2 <- ceiling( 5000 + runif(1) * 5000)
for( j in 1:numReadsLane1)
if( runif(1) < geneExpressionLane1 )
x1 <- x1+ 1;
for( j in 1:numReadsLane2)
if( runif(1) < geneExpressionLane2 )
x2 <- x2 + 1;
totalReads <- numReadsLane1 + numReadsLane2;
m <- matrix( c(x1,x2,numReadsLane1-x1,numReadsLane2-x2 ), nrow=2)
pValue <- fisher.test(m,alternative="greater")$p.value;
if( pValue  < 0.5 )
{
pValue = pValue * 2;
}
else
{
pValue = (1-pValue) * 2;
}
pValues[i] <- pValue;
titleStr <- paste("Number of simulated genes = ",i,sep="")
par( mfrow = c( 2, 1 ) )
# load package gap first
qqunif(pValues,main=titleStr)
hist(pValues,plot=TRUE,breaks=10)
}
library("gap")
rm(list=ls())
#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
pValues <- vector()
for( i in 1:10000)
{
x1 <- 0
x2 <- 0
numReadsLane1 <- ceiling( 5000 + runif(1) * 5000)
numReadsLane2 <- ceiling( 5000 + runif(1) * 5000)
for( j in 1:numReadsLane1)
if( runif(1) < geneExpressionLane1 )
x1 <- x1+ 1;
for( j in 1:numReadsLane2)
if( runif(1) < geneExpressionLane2 )
x2 <- x2 + 1;
totalReads <- numReadsLane1 + numReadsLane2;
m <- matrix( c(x1,x2,numReadsLane1-x1,numReadsLane2-x2 ), nrow=2)
pValue <- fisher.test(m,alternative="greater")$p.value;
if( pValue  < 0.5 )
{
pValue = pValue * 2;
}
else
{
pValue = (1-pValue) * 2;
}
pValues[i] <- pValue;
titleStr <- paste("Number of simulated genes = ",i,sep="")
par( mfrow = c( 1, 1 ) )
# load package gap first
qqunif(pValues,main=titleStr)
hist(pValues,plot=TRUE,breaks=10)
}
runif(1)
runif(1)/100
#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
numSimulations <- 10000
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
}
rm(list=ls())
library("gap")
numSimulations <- 10000
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
pValues <- vector();
means <- vector();
variance <- vector();
expectedMeans <- vector();
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
}
rm(list=ls())
library("gap")
numSimulations <- 1
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
pValues <- vector();
means <- vector();
variance <- vector();
expectedMeans <- vector();
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
numFound <- 0
results <- vector(length=numReadsPerSimulation)
for( j in oneToNumSims)
if( runif(1) <= rateOfGeneExperession   )
{
numFound <- numFound + 1;
results[j] <- 1;
}
else
{
results[j] <- 0;
}
means[i] <- mean(results);
variance[i] <- var(results);
pValues[i] <-
poisson.test( numFound, numReadsPerSimulation, rateOfGeneExperession,alternative="two.sided")$p.value
par( mfrow = c( 2, 2 ) )
titleStr <- paste("Number of simulated genes = ",i,sep="")
# load package gap first
plot(means, expectedMeans,main=titleStr)
plot(means, variance)
qqunif(pValues,logscale=FALSE,)
hist(pValues,plot=TRUE,breaks=10)
}
vals = seq(0,1,0.01)
plot(vals, dunif(vals))
seqs = 0:25
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = 0:25
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,1)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,0.01)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,1)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,100,1)
n=100
p=0.25
plot(seqs, dbinom(seqs, n, prob=p))
probs = seq(0,1,0.001)
alpha = 1
beta = 1
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 25
beta = 25
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 250
beta = 250
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 100
beta = 25
plot(probs, dbeta(probs, alpha, beta))
?binom.test
binom.test(34,50,alternative = 't')
binom.test(34,50,alternative = 'l')
1-binom.test(34,50,alternative = 'l')$p.value
## H0:= p == 0.5
binom.test(34,50)$p.value
binom.test(34,50,alternative = 't')$p.value
## H0:= p >= 0.5
binom.test(34,50,alternative = 'l')$p.value
## H0:= p <=0.5
binom.test(34,50,alternative = 'g')$p.value
1-pbinom.test(34,50)
1-pbinom(34,50)
1-pbinom(34,50,p=0.5)
0.5 * 1-pbinom(34,50,p=0.5)
0.5 * (1-pbinom(34,50,p=0.5))
0.5 * (1-pbinom(35,50,p=0.5))
dbinom(35,50,p=0.5)
dbinom(34,50,p=0.5)
dbinom(34,50,p=0.5)
dbinom(34,50,p=0.68)
dbinom(34,50,p=0.69)
dbinom(34,50,p=0.67)
dbinom(34,50,p=0.5)
1-pbinom(35,50,p=0.5)
(1-pbinom(35,50,p=0.5)) * 2
binom.test(34,50)$p.value
sum(dbinom(34:50,50,p=0.5))
sum(dbinom(34:50,50,p=0.5)) * 2
1-pbinom(33,50,p=0.5)
binom.test(34,50)$p.value ## 0.01534668 = sum(dbinom(34:50,50,p=0.5)) * 2
sum(dbinom(34:50,50,p=0.5)) * 2
(1-pbinom(33,50,p=0.5)) * 2
?dunif
dunif(10)
dunif(5)
dunif(0.5)
dunif(0.2)
dunif(0.2, 0, 2)
dunif(0.2)
?dbinom
x = seq(0,100,1)
plot(x, dbinom(x, 100, prob = 0.25))
?dbeta
plot(x, dbeta(x, 1, 1))
plot(x, dbeta(x, 80, 20))
probs = seq(0,1,0.001)
alpha = 100
beta = 25
plot(probs, dbeta(probs, alpha, beta))
x = seq(0,100,1)
plot(x, dbinom(x, 100, prob = 0.25))
x = seq(0,1,0.001)
plot(x, dbeta(x, 1, 1))
x = seq(0,1,0.001)
plot(x, dbeta(x, 10, 1))
x = seq(0,1,0.001)
plot(x, dbeta(x, 10, 10))
x = seq(0,1,0.001)
plot(x, dbeta(x, 1, 1))
plot(x, dbeta(x, 25, 25))
plot(x, dbeta(x, 100, 25))
binom.test(34,50)$p.value
binom.test(34,50,alternative = 't')$p.value
binom.test(34,50,alternative = 'l')$p.value
binom.test(34,50,alternative = 'g')$p.value
?binom.test
binom.test(34,50,p=0.68)
binom.test(34,50,p=0.68)
?dunif
x=c(1,2)
dunif(c)
x=c(1,2)
plot(x, dunif(x))
vals = seq(0,1,0.01)
plot(vals, dunif(vals))
?dmultinom
x=seq(1,5,1)
plot(x, dmultinom(1:5, prob=c(.2,.2,.2,.2,.2)))
x=seq(1,2,1)
plot(x, dmultinom(1:2, prob=c(.5,.5)))
str(dbinom)
str(dbinom.test)
str(dmultinom)
summary(dmultinom)
summary(dmultinom())
plot(seq(0,1,0.01), dbeta(1,1))
x = seq(0,1,0.01)
plot(x, dbeta(x,1,1))
x = seq(0,1,0.01)
plot(x, dbeta(x,2,2))
x = seq(0,1,0.01)
plot(x, dbeta(x,10,10))
x = seq(0,1,0.01)
plot(x, dbeta(x,100,100))
x = seq(0,1,0.01)
plot(x, dbeta(x,10000,10000))
x = seq(0,1,0.0001)
plot(x, dbeta(x,10000,10000))
x = seq(0,1,0.0001)
plot(x, dbeta(x,100,100))
x = seq(0,1,0.0001)
plot(x, dbeta(x,10,10))
x = seq(0,1,0.0001)
plot(x, dbeta(x,2,2))
print('hello')
library("gap")
setwd(
"D:\\2022_spring\\8310_bioinformatics_advanced_stats\\R_working_dir\\advanced_statistics\\project_preliminary_work"
)
df_variable <- read.table(
"variables.csv",
header=TRUE,
sep=','
#row.names=1
)
print(dim(df_variable))
print(head(df_variable))
str(df_variable)
#cov(df_variable)
data_colname = colnames(df_variable)
print(data_colname)
