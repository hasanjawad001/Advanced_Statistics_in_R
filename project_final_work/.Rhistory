#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
pValues <- vector()
for( i in 1:10000)
{
x1 <- 0
x2 <- 0
numReadsLane1 <- ceiling( 5000 + runif(1) * 5000)
numReadsLane2 <- ceiling( 5000 + runif(1) * 5000)
for( j in 1:numReadsLane1)
if( runif(1) < geneExpressionLane1 )
x1 <- x1+ 1;
for( j in 1:numReadsLane2)
if( runif(1) < geneExpressionLane2 )
x2 <- x2 + 1;
totalReads <- numReadsLane1 + numReadsLane2;
m <- matrix( c(x1,x2,numReadsLane1-x1,numReadsLane2-x2 ), nrow=2)
pValue <- fisher.test(m,alternative="greater")$p.value;
if( pValue  < 0.5 )
{
pValue = pValue * 2;
}
else
{
pValue = (1-pValue) * 2;
}
pValues[i] <- pValue;
titleStr <- paste("Number of simulated genes = ",i,sep="")
par( mfrow = c( 2, 1 ) )
# load package gap first
qqunif(pValues,main=titleStr)
hist(pValues,plot=TRUE,breaks=10)
}
library("gap")
rm(list=ls())
#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
pValues <- vector()
for( i in 1:10000)
{
x1 <- 0
x2 <- 0
numReadsLane1 <- ceiling( 5000 + runif(1) * 5000)
numReadsLane2 <- ceiling( 5000 + runif(1) * 5000)
for( j in 1:numReadsLane1)
if( runif(1) < geneExpressionLane1 )
x1 <- x1+ 1;
for( j in 1:numReadsLane2)
if( runif(1) < geneExpressionLane2 )
x2 <- x2 + 1;
totalReads <- numReadsLane1 + numReadsLane2;
m <- matrix( c(x1,x2,numReadsLane1-x1,numReadsLane2-x2 ), nrow=2)
pValue <- fisher.test(m,alternative="greater")$p.value;
if( pValue  < 0.5 )
{
pValue = pValue * 2;
}
else
{
pValue = (1-pValue) * 2;
}
pValues[i] <- pValue;
titleStr <- paste("Number of simulated genes = ",i,sep="")
par( mfrow = c( 1, 1 ) )
# load package gap first
qqunif(pValues,main=titleStr)
hist(pValues,plot=TRUE,breaks=10)
}
runif(1)
runif(1)/100
#no gene more than 0.01
geneExpressionLane1 <- runif(1) / 100
geneExpressionLane2 <- geneExpressionLane1;
numSimulations <- 10000
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
}
rm(list=ls())
library("gap")
numSimulations <- 10000
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
pValues <- vector();
means <- vector();
variance <- vector();
expectedMeans <- vector();
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
}
rm(list=ls())
library("gap")
numSimulations <- 1
numReadsPerSimulation <- 100000
oneToNumSims <- 1:numReadsPerSimulation
pValues <- vector();
means <- vector();
variance <- vector();
expectedMeans <- vector();
for( i in 1:numSimulations)
{
rateOfGeneExperession <- runif(1) / 100;  # no gene is more than 1%
expectedMeans[i] <- rateOfGeneExperession
numFound <- 0
results <- vector(length=numReadsPerSimulation)
for( j in oneToNumSims)
if( runif(1) <= rateOfGeneExperession   )
{
numFound <- numFound + 1;
results[j] <- 1;
}
else
{
results[j] <- 0;
}
means[i] <- mean(results);
variance[i] <- var(results);
pValues[i] <-
poisson.test( numFound, numReadsPerSimulation, rateOfGeneExperession,alternative="two.sided")$p.value
par( mfrow = c( 2, 2 ) )
titleStr <- paste("Number of simulated genes = ",i,sep="")
# load package gap first
plot(means, expectedMeans,main=titleStr)
plot(means, variance)
qqunif(pValues,logscale=FALSE,)
hist(pValues,plot=TRUE,breaks=10)
}
vals = seq(0,1,0.01)
plot(vals, dunif(vals))
seqs = 0:25
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = 0:25
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,1)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,0.01)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,25,1)
n=25
p=0.5
plot(seqs, dbinom(seqs, n, prob=p))
seqs = seq(0,100,1)
n=100
p=0.25
plot(seqs, dbinom(seqs, n, prob=p))
probs = seq(0,1,0.001)
alpha = 1
beta = 1
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 25
beta = 25
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 250
beta = 250
plot(probs, dbeta(probs, alpha, beta))
probs = seq(0,1,0.001)
alpha = 100
beta = 25
plot(probs, dbeta(probs, alpha, beta))
?binom.test
binom.test(34,50,alternative = 't')
binom.test(34,50,alternative = 'l')
1-binom.test(34,50,alternative = 'l')$p.value
## H0:= p == 0.5
binom.test(34,50)$p.value
binom.test(34,50,alternative = 't')$p.value
## H0:= p >= 0.5
binom.test(34,50,alternative = 'l')$p.value
## H0:= p <=0.5
binom.test(34,50,alternative = 'g')$p.value
1-pbinom.test(34,50)
1-pbinom(34,50)
1-pbinom(34,50,p=0.5)
0.5 * 1-pbinom(34,50,p=0.5)
0.5 * (1-pbinom(34,50,p=0.5))
0.5 * (1-pbinom(35,50,p=0.5))
dbinom(35,50,p=0.5)
dbinom(34,50,p=0.5)
dbinom(34,50,p=0.5)
dbinom(34,50,p=0.68)
dbinom(34,50,p=0.69)
dbinom(34,50,p=0.67)
dbinom(34,50,p=0.5)
1-pbinom(35,50,p=0.5)
(1-pbinom(35,50,p=0.5)) * 2
binom.test(34,50)$p.value
sum(dbinom(34:50,50,p=0.5))
sum(dbinom(34:50,50,p=0.5)) * 2
1-pbinom(33,50,p=0.5)
binom.test(34,50)$p.value ## 0.01534668 = sum(dbinom(34:50,50,p=0.5)) * 2
sum(dbinom(34:50,50,p=0.5)) * 2
(1-pbinom(33,50,p=0.5)) * 2
?dunif
dunif(10)
dunif(5)
dunif(0.5)
dunif(0.2)
dunif(0.2, 0, 2)
dunif(0.2)
?dbinom
x = seq(0,100,1)
plot(x, dbinom(x, 100, prob = 0.25))
?dbeta
plot(x, dbeta(x, 1, 1))
plot(x, dbeta(x, 80, 20))
probs = seq(0,1,0.001)
alpha = 100
beta = 25
plot(probs, dbeta(probs, alpha, beta))
x = seq(0,100,1)
plot(x, dbinom(x, 100, prob = 0.25))
x = seq(0,1,0.001)
plot(x, dbeta(x, 1, 1))
x = seq(0,1,0.001)
plot(x, dbeta(x, 10, 1))
x = seq(0,1,0.001)
plot(x, dbeta(x, 10, 10))
x = seq(0,1,0.001)
plot(x, dbeta(x, 1, 1))
plot(x, dbeta(x, 25, 25))
plot(x, dbeta(x, 100, 25))
binom.test(34,50)$p.value
binom.test(34,50,alternative = 't')$p.value
binom.test(34,50,alternative = 'l')$p.value
binom.test(34,50,alternative = 'g')$p.value
?binom.test
binom.test(34,50,p=0.68)
binom.test(34,50,p=0.68)
?dunif
x=c(1,2)
dunif(c)
x=c(1,2)
plot(x, dunif(x))
vals = seq(0,1,0.01)
plot(vals, dunif(vals))
?dmultinom
x=seq(1,5,1)
plot(x, dmultinom(1:5, prob=c(.2,.2,.2,.2,.2)))
x=seq(1,2,1)
plot(x, dmultinom(1:2, prob=c(.5,.5)))
str(dbinom)
str(dbinom.test)
str(dmultinom)
summary(dmultinom)
summary(dmultinom())
plot(seq(0,1,0.01), dbeta(1,1))
x = seq(0,1,0.01)
plot(x, dbeta(x,1,1))
x = seq(0,1,0.01)
plot(x, dbeta(x,2,2))
x = seq(0,1,0.01)
plot(x, dbeta(x,10,10))
x = seq(0,1,0.01)
plot(x, dbeta(x,100,100))
x = seq(0,1,0.01)
plot(x, dbeta(x,10000,10000))
x = seq(0,1,0.0001)
plot(x, dbeta(x,10000,10000))
x = seq(0,1,0.0001)
plot(x, dbeta(x,100,100))
x = seq(0,1,0.0001)
plot(x, dbeta(x,10,10))
x = seq(0,1,0.0001)
plot(x, dbeta(x,2,2))
print('hello')
## check correlation matrix
library("gap")
setwd(
"D:\\2022_spring\\8310_bioinformatics_advanced_stats\\R_working_dir\\advanced_statistics\\project_final_work"
)
df_variable <- read.table(
"variables.csv",
header=TRUE,
sep=','
#row.names=1
)
print(dim(df_variable))
print(head(df_variable))
str(df_variable)
data_colname = colnames(df_variable)
print(data_colname)
data_colname_29 = data_colname[
! data_colname %in% c(data_colname[1], 'region_sim')
]
data_colname_16 = data_colname[
data_colname %in% c(
'Pop_bw20_34', 'logPop_tot',                              ## demographic
'logMort_resp', 'logMort_infect',                          ## disease
'GINI_index', 'Business',                                  ## economic
'Temp', 'logPercip', 'logPollution',                       ## environment
'Pop_Urban', 'Urban_pop',                                   ## habitat
'GHS', 'logNurses',                                        ## health
'Social_media', 'logInternet_filtering', 'log_Air_trans'   ## demographic
)
]
print(data_colname_29)
print(data_colname_16)
df_variable_29 = df_variable[, data_colname_29]
df_variable_16 = df_variable[, data_colname_16]
print(dim(df_variable))
print(dim(df_variable_29))
print(dim(df_variable_16))
cr_29 = cor(df_variable_29)
cr_16 = cor(df_variable_16)
print(dim(cr_29))
print(dim(cr_16))
library(corrplot)
pdf(file = "cr_29.pdf")
corrplot(
cr_29,
method = "number",
#  type = "lower",
title = "correlation matrix over 29 covariates",
mar = c(0,0,1,0),
number.cex = 0.5,
number.digits = 2
)
dev.off()
##
#print(cr_29[,c('Log10GDP')])
##
pdf(file = "cr_16.pdf")
corrplot(
cr_16,
method = "number",
#  type = "lower",
title = "correlation matrix over 16 covariates",
mar = c(0,0,1,0),
number.cex = 0.5,
number.digits = 2
)
dev.off()
## max correlation -0.65 between business and GHS
## 2. Analyse based on PCA, how many principle component for 95%? out of 16
print(dim(df_variable_29))
print(dim(df_variable_16))
pca_29 = prcomp(df_variable_29, center = TRUE,scale. = TRUE) ## princomp
pca_16 = prcomp(df_variable_16, center = TRUE,scale. = TRUE)
summary(pca_29)
summary(pca_16)
## 3. pair wise plotting within each category
#  'Pop_bw20_34', 'logPop_tot',                              ## demographic
#  'logMort_resp', 'logMort_infect',                          ## disease
#  'GINI_index', 'Business',                                  ## economic
#  'Temp', 'logPercip', 'logPollution',                       ## environment
#  'Pop_Urban', 'Urban_pop',                                   ## habitat
#  'GHS', 'logNurses',                                        ## health
#  'Social_media', 'logInternet_filtering', 'log_Air_trans'   ## social media
##
colnames(df_variable_16)
print(data_colname_16)
val_col = c(5,12,13) ## social media (5,12,13) == (air_trans, social_media, internet)
val_title = '(Social Media)'
pairs(df_variable_16[val_col],
col = 'blue', #modify color
labels = data_colname_16[val_col], #modify labels
main = paste('Pair-wise', val_title) ) #modify title
print(dim(df_variable)) ## 58 X 31
print(dim(df_variable_29)) ## 58 X 29
print(dim(df_variable_16)) ## 58 X 16
pca_29 = prcomp(df_variable_29, center = TRUE,scale. = TRUE) ## princomp
pca_16 = prcomp(df_variable_16, center = TRUE,scale. = TRUE)
col_region = df_variable['region_sim'][,1]
col_color = vector(length = length(col_region))
unique_region = unique(col_region)
print(unique_region)
for(i in 1:length(col_region)){
if ( col_region[i]=='AF') {
col_color[i]='red'
} else if (col_region[i]=='SA') {
col_color[i]='blue'
} else if (col_region[i]=='AS') {
col_color[i]='green'
} else if (col_region[i]=='EU') {
col_color[i]='magenta'
} else if (col_region[i]=='EUAS') {
col_color[i]='cyan'
} else if (col_region[i]=='NOR') {
col_color[i]='orange'
} else if (col_region[i]=='ME') {
col_color[i]='black'
} else{
print('ERROR!!!')
}
}
print(col_color)
png(file="pca1_vs_pca2_covariates_29.png",width=600,height=300)
plot(pca_29$x[,1],pca_29$x[,2], col=col_color)
legend(
x='topright',
legend=c('AF', 'SA', 'AS', 'EU', 'EUAS', 'NOR', 'ME'),
col=c('red', 'green', 'blue', 'magenta', 'cyan', 'orange', 'black'),
lty=1:2, cex=0.8
)
dev.off()
png(file="pca1_vs_pca2_covariates_16.png",width=600,height=300)
plot(pca_16$x[,1],pca_16$x[,2], col=col_color)
legend(
x='topright',
legend=c('AF', 'SA', 'AS', 'EU', 'EUAS', 'NOR', 'ME'),
col=c('red', 'green', 'blue', 'magenta', 'cyan', 'orange', 'black'),
lty=1:2, cex=0.8
)
dev.off()
png(file="pca1_vs_pca2_covariates_16.png",width=600,height=300)
plot(pca_16$x[,1],pca_16$x[,2], col=col_color)
legend(
x='topright',
legend=c('AF', 'SA', 'AS', 'EU', 'EUAS', 'NOR', 'ME'),
col=c('red', 'green', 'blue', 'magenta', 'cyan', 'orange', 'black'),
lty=1:2, cex=0.8
)
dev.off()
library("gap")
setwd(
"D:\\2022_spring\\8310_bioinformatics_advanced_stats\\R_working_dir\\advanced_statistics\\project_final_work"
)
png(file="pca1_vs_pca2_covariates_16.png",width=600,height=300)
plot(pca_16$x[,1],pca_16$x[,2], col=col_color)
legend(
x='topright',
legend=c('AF', 'SA', 'AS', 'EU', 'EUAS', 'NOR', 'ME'),
col=c('red', 'green', 'blue', 'magenta', 'cyan', 'orange', 'black'),
lty=1:2, cex=0.8
)
dev.off()
## 5. 7C2=21 paired t-test to figure out how different each region from other
list_r0 <- df_variable['R0'][,1]
col_r0 <- vector(length= length(list_r0))
for(i in 1:length(list_R0)){
col_r0[i] = list_r0[i]
}
col_region <- factor(col_region)
#myLm <- lm(col_r0 ~ col_region, x=TRUE)
#anova(myLm)
#print(myLm$x)
pairwise.t.test(col_r0, col_region, p.adjust.method='BH')
## 5. 7C2=21 paired t-test to figure out how different each region from other
list_r0 <- df_variable['R0'][,1]
col_r0 <- vector(length= length(list_r0))
for(i in 1:length(list_r0)){
col_r0[i] = list_r0[i]
}
col_region <- factor(col_region)
#myLm <- lm(col_r0 ~ col_region, x=TRUE)
#anova(myLm)
#print(myLm$x)
pairwise.t.test(col_r0, col_region, p.adjust.method='BH')
library("Hmisc")
png(file="Ro_vs_covariates_16.png",width=1000,height=1000)
par(mfrow = c(4, 4))
list_r0 <- df_variable['R0'][,1]
r0_max = max(list_r0)
r0_min = min(list_r0)
#print(r0_min)
#print(r0_max)
data_readable = c(
'Youth', 'Total Pop', 'Mort Resp', 'Mort Infect',
'GINI', 'Business', 'Temparature', 'Precipitation',
'Pollution', 'City', 'Urbanization', 'GHS',
'Nurses', 'Social Media', 'Internet Filtering', 'Air Transport'
)
print(data_colname_16)
for( i in 1: length(data_colname_16)){
var <- data_colname_16[i]
list_var <- df_variable[var][,1]
myLm <- lm(list_r0 ~ list_var, x=TRUE)
myAnova <- anova(myLm)
p_value <- myAnova$"Pr(>F)"[1]
p_value <- format(round(p_value, 2), nsmall = 2)
plot(
list_var, list_r0,
ylab = 'R0', xlab = data_readable[i],
main = paste('(linear) p = ', p_value),
ylim = c(r0_min-1, r0_max+1),
cex.lab=1.5, cex.main=2
)
var_max = max(list_var)
var_min = min(list_var)
var_by = (var_max - var_min)/20
xRange <- seq(from=var_min, to=var_max, by=var_by)
linearMeans <- coef(myLm)[1] + coef(myLm)[2] * xRange
meanR <- mean(residuals(myLm))
standardError = sqrt(
sum((residuals(myLm)-meanR)^2/(length(residuals(myLm))-2))
)
#abline(myLm)
#lines(xRange, linearMeans)
errbar(
xRange, linearMeans,
linearMeans + (1*standardError), linearMeans - (1*standardError),
add=TRUE
)
}
dev.off()
